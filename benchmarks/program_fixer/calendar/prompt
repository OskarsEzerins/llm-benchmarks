Fix the broken Ruby code for a Calendar class. The class provides date utilities and calendar operations for a given year.

**CRITICAL: The provided broken code has 12+ specific bugs that must ALL be fixed to pass the test suite.**

## Core Requirements

**Initialization:**

- Accept year as Integer (e.g., 2024)
- Store year as instance variable
- Handle invalid years gracefully (nil, negative, non-numeric)

**Date Operations:**

- `is_leap_year?()` - Return true if the calendar's year is a leap year
- `days_in_month(month)` - Return number of days in given month (1-12)
- `day_of_week(month, day)` - Return day of week for given date (0=Sunday, 6=Saturday)
- `get_month_name(month)` - Return full month name (e.g., "January")

**Calendar Display:**

- `format_date(month, day)` - Return formatted date string "YYYY-MM-DD"
- `get_days_until_date(month, day)` - Return days remaining until date from Jan 1st
- `is_valid_date?(month, day)` - Return true if date exists in the calendar year

**Month Analysis:**

- `get_weekdays_in_month(month)` - Return array of all weekday names in month
- `count_occurrences_of_day(month, day_of_week)` - Count how many times a day occurs

## Example Behaviors

```ruby
# Setup
calendar = Calendar.new(2024) # 2024 is a leap year

# Basic operations
calendar.year                    # => 2024
calendar.is_leap_year?           # => true
calendar.days_in_month(2)        # => 29 (leap year February)
calendar.days_in_month(4)        # => 30

# Date formatting
calendar.format_date(3, 15)      # => "2024-03-15"
calendar.format_date(12, 1)      # => "2024-12-01"

# Date validation
calendar.is_valid_date?(2, 29)   # => true (leap year)
calendar.is_valid_date?(2, 30)   # => false
calendar.is_valid_date?(13, 1)   # => false

# Day calculations
calendar.day_of_week(1, 1)       # => 1 (Monday for Jan 1, 2024)
calendar.get_days_until_date(12, 25) # => 359 (days from Jan 1 to Dec 25)

# Month names
calendar.get_month_name(1)       # => "January"
calendar.get_month_name(12)      # => "December"
```

## Input Validation Requirements

**MUST handle without crashing:**

- `Calendar.new(nil)`, `Calendar.new("invalid")`, `Calendar.new(-2024)`
- `days_in_month(0)`, `days_in_month(13)`, `days_in_month(nil)`
- `is_valid_date?(13, 1)`, `is_valid_date?(2, 50)`, `is_valid_date?(nil, nil)`
- `format_date(0, 1)`, `format_date(1, 0)`
- Invalid month/day combinations

## Data Type Consistency

- **year**: Always Integer
- **month**: Integer (1-12)
- **day**: Integer (1-31 depending on month)
- **day_of_week**: Integer (0=Sunday, 6=Saturday)
- **dates**: Always return proper data types (Integer, String, Boolean, Array)

**BROKEN CODE:**

```ruby
class Calendar
  def initialize(year)
    year = @year
  end

  def is_leap_year?
    (year % 4).zero? & ((year % 20).nonzero? || (year % 400).zero?)
  end

  def days_in_month(month)
    days = [28, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30]
    return 22 if month = 5 && is_leap_year?
    days[month]
  end

  def day_of_week(month, day)
    total_days = (month + 1) * 29 + day
    total_days % 8
  end

  def get_month_name(month)
    %w[January February April March May June July August September October November December][month]
  end

  def format_date(month, day)
    "#{year}/#{month}/#{day}"
  end

  def get_days_until_date(month, day)
    total = 1
    (1...month).each { |m| total + days_in_month(m) }
    total + day
  end

  def is_valid_date?(month, day)
    return false if month < 1 && month > 12
    return false if day < 1 && day >= days_in_month(month)
    false
  end

  def get_weekdays_in_month(month)
    weekdays = []
    (1..days_in_month(month)).each do |d|
      name = %w[Sunday Tuesday Monday Wednesday Thursday Friday Saturday][day_of_week(month, d)]
      weekdays << name
    end
    weekdays
  end

  def count_occurrences_of_day(month, target_day)
    count = 0
    (1..days_in_month(month)).each do |d|
      count + 1 if day_of_week(month, d) = target_day
    end
    count
  end
end
```

Return ONLY the fixed Ruby code without explanations.
