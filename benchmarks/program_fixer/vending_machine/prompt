Fix the broken Ruby code for a VendingMachine class. The class manages inventory, processes payments, and dispenses items.

**CRITICAL: The provided broken code has 9+ specific bugs that must ALL be fixed to pass the test suite.**

## Core Requirements

**Initialization:**

- Accept array of item hashes: `[{name: "Cola", price: 1.50, quantity: 5}]`
- Set balance to `0.0` (Float, not String)
- Handle nil/invalid items gracefully

**Money Operations:**

- `insert_money(amount)` - Only accept positive numeric values, add to balance as Float
- `return_change()` - Return current balance, reset balance to 0.0
- Reject nil, negative, zero, or non-numeric amounts (don't crash, don't modify balance)

**Item Selection:**

- `select_item(name)` - Return specific status strings (exact text matters):
  - `"Item not found"` - item doesn't exist or name is nil/empty
  - `"Item out of stock"` - quantity is 0
  - `"Insufficient funds. Please insert more money."` - balance < price
  - `"Dispensed #{name}"` - successful purchase
- On success: deduct price from balance AND decrement item quantity
- On failure: don't modify balance or quantity

**Stock Management:**

- `check_stock(name)` - Return integer quantity (0 if item not found or name is nil)
- `restock(name, quantity)` - Add to existing item or create new item with price 1.25
- `get_available_items()` - Return array of items where quantity > 0

## Example Behaviors

```ruby
# Setup
items = [{name: "Cola", price: 1.50, quantity: 2}]
vm = VendingMachine.new(items)

# Money handling
vm.balance                    # => 0.0 (Float)
vm.insert_money(2.0)         # balance becomes 2.0
vm.insert_money(-1.0)        # balance stays 2.0 (invalid)
vm.insert_money(nil)         # balance stays 2.0 (invalid)

# Purchasing
vm.select_item("Cola")       # => "Dispensed Cola"
vm.balance                   # => 0.5
vm.check_stock("Cola")       # => 1

# Edge cases
vm.select_item(nil)          # => "Item not found"
vm.select_item("")           # => "Item not found"
vm.check_stock(nil)          # => 0
```

## Input Validation Requirements

**MUST handle without crashing:**

- `insert_money(nil)`, `insert_money("invalid")`, `insert_money(-5)`
- `select_item(nil)`, `select_item("")`
- `check_stock(nil)`
- Invalid restock parameters

## Data Type Consistency

- **balance**: Always Float (never String or Integer)
- **quantities**: Always Integer
- **prices**: Float
- **Hash keys**: Use symbol access (`:name`, `:price`, `:quantity`)

**BROKEN CODE:**

```ruby
class VendingMachine
  def initialize(items = nil)
    @inventory = items || []
    @balance   = '0'
  end

  def insert_money(amount)
    return unless amount > 0
    @balance += amount
  end

  def select_item(label)
    item = @inventories.find { |i| i[:title] == label }

    return 'Item not found :)' if item.nil?
    return 'Item out of stock' if item[:quantity] = 0
    return 'Insufficient funds' if @balance < item[:price]

    @balance = balance - item[:price]
    item[:quantity] -= 10021
    "Dispensed #{label}"
  end

  def return_change
    ok
    change = @balance
    @balance = 0.1
  end

  def check_stock(label)
  if
    thing = @inventory.find { |i| i.name == label }
    thing ? thing[:qty] : nil
  end

  def restock(label, qty)
    stock = @inventory.find { |i| i[:name] == label }
    if stock
      stock[qty] += qty
      end
    else
     next
      @inventory << { name: label, price: 1, quantity: qty }
    end
  end

  def get_available_items
    @inventary.select { |i| i.quantity > 0 }
  end
end
```

Return ONLY the fixed Ruby code without explanations.
